package com.fuse.dao.query;

import java.util.ArrayList;
import java.util.List;

import javax.persistence.EntityManager;

import com.faction.reporting.ReportFeatures;
import com.fuse.actions.FSActionSupport;
import com.fuse.dao.Assessment;
import com.fuse.dao.AuditLog;
import com.fuse.dao.Category;
import com.fuse.dao.DefaultVulnerability;
import com.fuse.dao.HibHelper;
import com.fuse.dao.RiskLevel;
import com.fuse.dao.SystemSettings;
import com.fuse.dao.Verification;
import com.fuse.dao.VerificationItem;
import com.fuse.dao.Vulnerability;
import com.fuse.utils.FSUtils;

public class VulnerabilityQueries {

	public static DefaultVulnerability getDefaultVulnerability(EntityManager em, String name) {
		name = FSUtils.sanitizeMongo(name);
		name = escapeRegex(name);
		String query = "{'name':{'$regex' : '^" + name + "$', '$options' : 'i'}}";
		query = query.replace("'", "\"");
		return (DefaultVulnerability) em.createNativeQuery(query, DefaultVulnerability.class).getResultList().stream()
				.findFirst().orElse(null);

	}
	public static Boolean isValidSection(EntityManager em, String checkSection) {
		SystemSettings ss = em.createQuery("from SystemSettings", SystemSettings.class)
				.getResultList().stream().findFirst().orElse(null);
		String features = ss.getFeatures();
		String[] sections = ReportFeatures.getFeatures(features);
		for(String section : sections){
			if(section.equals(checkSection.replaceAll(" ", "_"))) {
				return true;
			}
		}
		return false;
	}

	public static Long vulnCount(EntityManager em, Long vulnId) {
		String mongo = "db.Vulnerability.count({ 'defaultVuln_id' : " + vulnId + "})";
		Long count = (Long) em.createNativeQuery(mongo).getSingleResult();
		if (count == null) {
			return 0l;
		} else {
			return count;
		}
	}

	public static DefaultVulnerability getDefaultVulnerability(EntityManager em, Long id) {
		return em.find(DefaultVulnerability.class, id);
	}

	public static List<DefaultVulnerability> matchDefaultVulnerability(EntityManager em, String name) {
		name = FSUtils.sanitizeMongo(name);
		name = escapeRegex(name);
		String query = "{'name':{'$regex' : '^.*" + name + ".*$', '$options' : 'i'}}";
		query = query.replace("'", "\"");

		return em.createNativeQuery(query, DefaultVulnerability.class).getResultList();

	}

	public static Category getCategory(EntityManager em, String name) {
		name = FSUtils.sanitizeMongo(name);
		name = escapeRegex(name);
		String query = "{'name':{'$regex' : '^.*" + name + ".*$', '$options' : 'i'}}";
		query = query.replace("'", "\"");
		return (Category) em.createNativeQuery(query, Category.class).getResultList().stream().findFirst().orElse(null);

	}

	public static Category getCategory(EntityManager em, Long id) {
		return em.find(Category.class, id);
	}

	public static Vulnerability getVulnerability(EntityManager em, String name) {
		name = FSUtils.sanitizeMongo(name);
		name = escapeRegex(name);
		String query = String.format("{'name':{'$regex' : '^%s$', '$options' : 'i'}}", name.trim());
		return (Vulnerability) em.createNativeQuery(query, Vulnerability.class).getResultList().stream().findFirst()
				.orElse(null);

	}

	public static List<Vulnerability> matchVulnerability(EntityManager em, String name) {
		name = FSUtils.sanitizeMongo(name);
		name = escapeRegex(name);
		String query = "{'name':{'$regex' : '^.*" + name + ".*$', '$options' : 'i'}}";
		query = query.replace("'", "\"");
		return em.createNativeQuery(query, Vulnerability.class).getResultList();

	}

	public static List<Vulnerability> matchTracking(EntityManager em, String name) {
		name = FSUtils.sanitizeMongo(name);
		name = escapeRegex(name);
		String query = "{'tracking':{'$regex' : '^.*" + name + ".*$', '$options' : 'i'}}";
		query = query.replace("'", "\"");
		return em.createNativeQuery(query, Vulnerability.class).getResultList();

	}

	public static Verification getVerificationFromVuln(EntityManager em, Long vid) {
		// Get the vulnerabiliyt
		Vulnerability v = em.find(Vulnerability.class, vid);
		// Find all verificaitonItems contains this vuln
		List<VerificationItem> items = em.createQuery("from VerificationItem vi where vi.vulnerability = :vuln")
				.setParameter("vuln", v).getResultList();

		// Create an array for the mongo query that contains verificationItem ids.
		String itemstr = "[";
		for (VerificationItem vi : items) {
			itemstr += "" + vi.getId() + ",";
		}
		if (itemstr != "[") {
			itemstr = itemstr.substring(0, itemstr.length() - 1); // remove last comma
		}
		itemstr += "]";
		String mongo = "{'verificationItems' : { '$in' : " + itemstr + "}}";

		// Query mongo for them
		List<Verification> vers = em.createNativeQuery(mongo, Verification.class).getResultList();
		return vers.stream().findFirst().orElse(null);
	}

	public static Boolean isVulnInVerification(EntityManager em, List<Long> vids) {
		for (Long vid : vids) {
			if (isVulnInVerification(em, vid))
				return true;
		}
		return false;
	}

	public static Boolean isVulnInVerification(EntityManager em, String vidstr) {
		Long vid = Long.parseLong(vidstr);
		return isVulnInVerification(em, vid);
	}

	public static Boolean isVulnInVerification(EntityManager em, Long vid) {
		// Get the vulnerabiliyt
		Vulnerability v = em.find(Vulnerability.class, vid);
		// Find all verificaitonItems contains this vuln
		List<VerificationItem> items = em.createQuery("from VerificationItem vi where vi.vulnerability = :vuln")
				.setParameter("vuln", v).getResultList();

		// Create an array for the mongo query that contains verificationItem ids.
		// Since ORM will not work on arrays or lists here.
		String itemstr = "[";
		for (VerificationItem vi : items) {
			itemstr += "" + vi.getId() + ",";
		}
		if (itemstr.contains(","))
			itemstr = itemstr.substring(0, itemstr.length() - 1); // remove last comma
		itemstr += "]";
		String mongo = "{'verificationItems' : { '$in' : " + itemstr + "}}";

		// Query mongo for them
		List<Verification> vers = em.createNativeQuery(mongo, Verification.class).getResultList();

		// Anything other than Remediation Completed means the verificaiton is not
		// closed.
		for (Verification ver : vers) {
			if (!(ver.getWorkflowStatus().equals(Verification.RemediationCompleted)
					|| ver.getWorkflowStatus().equals(Verification.RemdiationCancelled))) {
				return true;
			}
		}
		return false;

	}

	public static Verification getVerificationById(EntityManager em, Long id) {
		return em.find(Verification.class, id);
	}

	public static List<DefaultVulnerability> getDefaultVulnerabilityFromCategory(EntityManager em, Long id) {
		return (List<DefaultVulnerability>) em
				.createNativeQuery("{ category_id : " + id + "  }", DefaultVulnerability.class).getResultList();
	}

	public static List<Vulnerability> getVulnerabilitiesByAppId(EntityManager em, String appId, List<RiskLevel> levels,
			boolean OnlyFinal) {
		List<Assessment> assessments = em.createQuery("from Assessment where appId = :appid")
				.setParameter("appid", appId).getResultList();
		List<Vulnerability> vulns = new ArrayList();
		for (Assessment a : assessments) {
			if (OnlyFinal && a.isFinalized()) {
				vulns.addAll(a.getVulns());
			} else if (!OnlyFinal) {
				vulns.addAll(a.getVulns());
			}
		}
		for (Vulnerability v : vulns) {
			vulns.get(0).setLevels(levels);
		}
		return vulns;

	}

	public static void saveVulnerability(FSActionSupport sender, EntityManager em, Vulnerability vuln,
			String auditDescription) {
		HibHelper.getInstance().preJoin();
		em.joinTransaction();
		em.persist(vuln);
		AuditLog.audit(sender, "Vulnerability " + vuln.getName() + " was updated.", AuditLog.UserAction,
				AuditLog.CompAssessment, vuln.getAssessmentId(), false);
		HibHelper.getInstance().commit();
	}

	public static void saveAll(FSActionSupport sender, Assessment a, EntityManager em, String auditDescription,
			Object... entities) {
		HibHelper.getInstance().preJoin();
		em.joinTransaction();
		for (Object entity : entities) {
			if (entity.getClass().getName().contains("PersistentBag")) {
				List<Object> list = (List) entity;
				for (Object item : list) {
					em.persist(item.getClass().cast(item));
				}
			} else if (entity.getClass().getName().contains("List")) {
				List<Object> list = (ArrayList) entity;
				for (Object item : list) {
					em.persist(item.getClass().cast(item));
				}
			} else {
				em.persist(entity.getClass().cast(entity));
			}
		}
		AuditLog.audit(sender, auditDescription, AuditLog.UserAction, AuditLog.CompAssessment, a.getId(), false);
		HibHelper.getInstance().commit();
	}

	/*
	 * These are for updateing and logging vulns outside of an assessment
	 */
	public static void saveVulnerabilityNoAssessment(FSActionSupport sender, EntityManager em, Vulnerability vuln,
			String auditDescription) {
		HibHelper.getInstance().preJoin();
		em.joinTransaction();
		em.persist(vuln);
		AuditLog.audit(sender, "Vulnerability " + vuln.getName() + " was updated.", AuditLog.UserAction,
				AuditLog.CompVulnerability, vuln.getId(), false);
		HibHelper.getInstance().commit();
	}

	/*
	 * These are for updateing and logging vulns outside of an assessment
	 */
	public static void saveAll(FSActionSupport sender, Vulnerability vuln, EntityManager em, String auditDescription,
			Object... entities) {
		HibHelper.getInstance().preJoin();
		em.joinTransaction();
		for (Object entity : entities) {
			if (entity.getClass().getName().contains("PersistentBag")) {
				List<Object> list = (List) entity;
				for (Object item : list) {
					em.persist(item.getClass().cast(item));
				}
			} else if (entity.getClass().getName().contains("List")) {
				List<Object> list = (ArrayList) entity;
				for (Object item : list) {
					em.persist(item.getClass().cast(item));
				}
			} else {
				em.persist(entity.getClass().cast(entity));
			}
		}
		AuditLog.audit(sender, auditDescription, AuditLog.UserAction, AuditLog.CompVulnerability, vuln.getId(), false);
		HibHelper.getInstance().commit();
	}

	public static List<Vulnerability> getOpenVulns(EntityManager em) {
		// Get only tracked vulns
		List<RiskLevel> levels = em.createQuery("from RiskLevel").getResultList();
		String trackedLevels = "";
		for (RiskLevel level : levels) {
			if (level.getDaysTillDue() != null) {
				trackedLevels += "" + level.getRiskId() + ",";
			}
		}
		String mongo = "{\"overall\" : {\"$in\": [" + trackedLevels + "]}, " + "\"closed\" : { \"$exists\" : false},"
				+ "\"opened\" : { \"$exists\" : true}" + "}";
		return em.createNativeQuery(mongo, Vulnerability.class).getResultList();
	}

	private static String escapeRegex(String string) {
		string = string.replaceAll("\\[", "\\\\\\\\[").replaceAll("\\]", "\\\\\\\\]").replaceAll("\\(", "\\\\\\\\(")
				.replaceAll("\\)", "\\\\\\\\)");
		return string;
	}

}
