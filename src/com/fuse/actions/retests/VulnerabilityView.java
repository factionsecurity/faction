package com.fuse.actions.retests;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

import org.apache.struts2.convention.annotation.Action;
import org.apache.struts2.convention.annotation.Namespace;
import org.apache.struts2.convention.annotation.Result;

import com.fuse.actions.FSActionSupport;
import com.fuse.dao.Assessment;
import com.fuse.dao.AuditLog;
import com.fuse.dao.Category;
import com.fuse.dao.CustomType;
import com.fuse.dao.PeerReview;
import com.fuse.dao.RiskLevel;
import com.fuse.dao.User;
import com.fuse.dao.Vulnerability;


@Namespace("/portal")
@Result(name="success",location="/WEB-INF/jsp/assessment/VulnerabilityView.jsp")
public class VulnerabilityView extends FSActionSupport{

	private Assessment assessment;
	private String id;
	private Boolean notowner;
	private List<RiskLevel>levels=new ArrayList();
	private List<CustomType> customFields = new ArrayList();
	private HashMap<Integer, Integer>counts = new HashMap();
	private List<Vulnerability>avulns = new ArrayList<Vulnerability>();
	private Boolean finalized;
	private Boolean prSubmitted;
	private Boolean prComplete;
	private List<Category> categories = new ArrayList();
	
	@Action(value="VulnerabilityView", results={})
	public String vulnView() {
		
	
		if(!(this.isAcassessor() || this.isAcmanager()))
			return AuditLog.notAuthorized(this, "User is not an Assessor or Manager" , true);
		User user = this.getSessionUser();
		
			if(this.getSession("asmtid") == null) {
			this.setSession("asmtid", Long.parseLong(this.id));
		}else {
			this.id = ""+this.getSession("asmtid");
		}
		
		
		Long lid = Long.parseLong(this.id);
		if(this.isAcmanager()) {
			assessment = (Assessment) em
					.createNativeQuery("{ \"_id\" : " + lid +"}", Assessment.class)
					.getResultList().stream().findFirst().orElse(null);
			User mgrs = assessment.getAssessor().stream().filter(u -> u.getId() == user.getId()).findFirst().orElse(null);
			if(mgrs == null)
				this.notowner = true;
		
		}else {
			assessment = (Assessment) em
					.createNativeQuery("{\"assessor\" : "+user.getId() +", \"_id\" : " + lid +"}", Assessment.class)
					.getResultList().stream().findFirst().orElse(null);
		}
		
		if(assessment == null)
			return SUCCESS;
	
		levels = em.createQuery("from RiskLevel order by riskId").getResultList();
		
		customFields = em.createQuery("from CustomType where type = 1 and (deleted IS NULL or deleted = false)").getResultList();
		
		categories = em.createQuery("from Category").getResultList();
		
		avulns = (List<Vulnerability>)assessment.getVulns();
		for(int i=0; i<10; i++){
			counts.put(i, 0);
		}
		for(Vulnerability v : avulns){
			v.updateRiskLevels(em);
			if(v.getOverall() == null || v.getOverall() == -1l)
				continue;
			else
				counts.put(v.getOverall().intValue(), counts.get(v.getOverall().intValue())+1);

		}
		
		prSubmitted=false;
		// don't update the database if we are in PeerReview
		PeerReview prTemp = (PeerReview)em
				.createNativeQuery("{\"assessment_id\" : "+assessment.getId() +"}", PeerReview.class)
				.getResultList().stream().findFirst().orElse(null);
		if( prTemp != null) {
			prSubmitted = true;
			if(prTemp.getCompleted() != null && prTemp.getCompleted().getTime() != 0){
				prComplete = true;
			}else
				prComplete = false;
		}
		finalized = assessment.isFinalized();
		
		return this.SUCCESS;

	}
	
	public String getActiveAQ() {
		return "active";
	}

	public Assessment getAssessment() {
		return assessment;
	}

	public String getId() {
		return id;
	}

	public Boolean getNotowner() {
		return notowner;
	}

	public List<RiskLevel> getLevels() {
		return levels;
	}

	public List<CustomType> getCustomFields() {
		return customFields;
	}

	public HashMap<Integer, Integer> getCounts() {
		return counts;
	}

	public List<Vulnerability> getAvulns() {
		return avulns;
	}

	public Boolean getFinalized() {
		return finalized;
	}

	public void setId(String id) {
		this.id = id;
	}

	public Boolean getPrSubmitted() {
		return prSubmitted;
	}

	public Boolean getPrComplete() {
		return prComplete;
	}

	public List<Category> getCategories() {
		return categories;
	}

	public void setCategories(List<Category> categories) {
		this.categories = categories;
	}
	
	
}
