package com.fuse.actions.assessment;

import java.io.File;
import java.io.FileReader;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.ArrayList;
import java.util.Base64;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.stream.Collectors;

import javax.transaction.HeuristicMixedException;
import javax.transaction.HeuristicRollbackException;
import javax.transaction.NotSupportedException;
import javax.transaction.RollbackException;
import javax.transaction.SystemException;

import org.apache.commons.lang3.StringEscapeUtils;
import org.apache.struts2.convention.annotation.Action;
import org.apache.struts2.convention.annotation.Namespace;
import org.apache.struts2.convention.annotation.Result;
import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;

import com.faction.reporting.ReportFeatures;
import com.fuse.actions.FSActionSupport;
import com.fuse.dao.Assessment;
import com.fuse.dao.AuditLog;
import com.fuse.dao.Category;
import com.fuse.dao.CustomField;
import com.fuse.dao.CustomType;
import com.fuse.dao.DefaultVulnerability;
import com.fuse.dao.ExploitStep;
import com.fuse.dao.Feed;
import com.fuse.dao.HibHelper;
import com.fuse.dao.Note;
import com.fuse.dao.PeerReview;
import com.fuse.dao.ReportMap;
import com.fuse.dao.User;
import com.fuse.dao.Vulnerability;
import com.fuse.utils.ParseXML;

import com.opencsv.*;

@Namespace("/portal")
@Result(name = "success", location = "/WEB-INF/jsp/assessment/AddVulnJSON.jsp")
public class AddVulnerability extends FSActionSupport {
	private String title;
	private int defaultTitle;
	private int defaultCategory;
	private Long likelyhood;
	private Long impact;
	private Long overall;
	private String description;
	private String recommendation;
	private String details;
	private Long id;
	private Long vulnid;
	private String delete;
	private String action;
	private String feedMsg;
	private Boolean add2feed = false;
	private String cf;
	private List<CustomField> fields = new ArrayList();
	private Long unittestVulnId;
	private Long dcategory;
	private Long dvulnerability;
	
	private String cvssString;
	private String cvssScore;
	private Long reportid;
	private Vulnerability current;
	
	private Assessment assessment;
	
	private String vulnAttr;
	
	private String reportSection="Default";
	

	private List<Long> vulns = new ArrayList();

	private List<ReportMap> reports = new ArrayList();

	private boolean isSame(String text1, String text2) {
		if (text1 != null) {
			text1 = StringEscapeUtils.unescapeHtml4(text1);
			text1 = text1.replaceAll("(<p>|</p>|<br>|<br />|\"|'|\r|\n| )", "");
		}
		if (text2 != null) {
			text2 = StringEscapeUtils.unescapeHtml4(text2);
			text2 = text2.replaceAll("(<p>|</p>|<br>|<br />|\"|'|\r|\n| )", "");
		}
		if (text2.equals(text1))
			return true;
		else
			return false;
	}

	@Action(value = "AddVulnerability", results = {
			@Result(name = "VULNDATA", location = "/WEB-INF/jsp/assessment/editVulnJSON.jsp") })
	public String execute()
			throws UnsupportedEncodingException, NotSupportedException, SystemException, IllegalStateException,
			SecurityException, HeuristicMixedException, HeuristicRollbackException, RollbackException, ParseException {

		if (!(this.isAcassessor() || this.isAcmanager()))
			return LOGIN;
		User user = this.getSessionUser();

		if (this.vulnid != null && action != null && action.equals("get")) {
			Vulnerability v = em.find(Vulnerability.class, vulnid);
			current = v;

			String tmpDesc = v.getDescription();
			if (tmpDesc == null && v.getDefaultVuln() != null) {

				this.description = URLEncoder.encode(
						Base64.getEncoder().encodeToString(v.getDefaultVuln().getDescription().getBytes()), "UTF-8");
			} else if (tmpDesc == null)
				this.description = "";
			else
				this.description = URLEncoder.encode(Base64.getEncoder().encodeToString(tmpDesc.getBytes()), "UTF-8");

			String tmpRec = v.getRecommendation();
			if (tmpRec == null && v.getDefaultVuln() != null)
				this.recommendation = URLEncoder.encode(
						Base64.getEncoder().encodeToString(v.getDefaultVuln().getRecommendation().getBytes()), "UTF-8");
			else if (tmpRec == null)
				this.recommendation = "";
			else
				this.recommendation = URLEncoder.encode(Base64.getEncoder().encodeToString(tmpRec.getBytes()), "UTF-8");
			
			this.details = v.getDetails() == null? "" : 
				URLEncoder.encode(Base64
						.getEncoder()
						.encodeToString(v.getDetails().getBytes()), "UTF-8");
			
			//Some CF need to be base64 encoded
			for(CustomField cf : v.getCustomFields()) {
				cf.setValue(URLEncoder.encode(Base64
						.getEncoder()
						.encodeToString(cf.getValue().getBytes()), "UTF-8")
						);
			}

			return "VULNDATA";
		} else if (this.vulnid != null && action != null && action.equals("delete")) {
			if (!this.testToken(false))
				return this.ERRORJSON;
			
			Vulnerability v = em.find(Vulnerability.class, vulnid);
			Assessment assessment = em.find(Assessment.class, v.getAssessmentId());

			if(this.isAssessmentBlocked(assessment, user)) {
				return this.ERRORJSON;
			}
			HibHelper.getInstance().preJoin();
			em.joinTransaction();

			if (assessment != null && assessment.getCompleted() != null) {
				this._message = "Assessment is Finalized";
				return this.ERRORJSON;

			}
			try {
				String query = "{ \"vulnerability_id\" : " + vulnid + "}";
				List<Feed> feeds = em.createNativeQuery(query, Feed.class).getResultList();
				for (Feed f : feeds) {
					em.remove(f);
				}

				for (Vulnerability vv : assessment.getVulns()) {
					if (vv.getId() == this.vulnid) {
						assessment.getVulns().remove(vv);
						em.remove(vv);
						AuditLog.audit(this, "Vulnerability " + vv.getName() + " was deleted from assessment.",
								AuditLog.UserAction, AuditLog.CompAssessment, vv.getAssessmentId(), false);
						break;
					}
				}
				em.persist(assessment);
			} finally {

				HibHelper.getInstance().commit();
			}

			return SUCCESSJSON;

		} else if (action != null && action.equals("add")) {

			if (!this.testToken(false))
				return this.ERRORJSON;

			Assessment assessment = em.find(Assessment.class, this.id);
			if(this.isAssessmentBlocked(assessment, user)) {
				return this.ERRORJSON;
			}
			
			if (this.title == null) {
				this.title = "";
			}
			if (this.overall == null || this.overall < 0 || this.overall > 9) {
				this.overall = 1l;
			}
			DefaultVulnerability dv = em.find(DefaultVulnerability.class, (long) defaultTitle);
			if (dv == null) {
				dv = em.createQuery("from DefaultVulnerability where name = 'Generic Vulnerability'", DefaultVulnerability.class).getResultList().stream().findFirst().orElse(null);
				Category cat = em.createQuery("from Category where name = 'Uncategorized'", Category.class).getResultList().stream().findFirst().orElse(null);
				if(cat == null) {
					cat = new Category();
					cat.setName("Uncategorized");
				}
				if(dv == null) {
					dv = new DefaultVulnerability();
					dv.setActive(true);
					dv.setCategory(cat);
					dv.setName("Generic Vulnerability");
					dv.setLikelyhood(4);
					dv.setOverall(4);
					dv.setImpact(4);
					dv.setDescription("");
					dv.setRecommendation("");
					HibHelper.getInstance().preJoin();
					em.joinTransaction();
					em.persist(cat);
					em.persist(dv);
					HibHelper.getInstance().commit();
				}
			}

			HibHelper.getInstance().preJoin();
			em.joinTransaction();
			try {

				Vulnerability vuln = new Vulnerability();
				vuln.setDefaultVuln(dv);
				vuln.setName(dv.getName());
				vuln.setCategory(dv.getCategory());
				vuln.setAssessmentId(id);
				vuln.setDescription(description);
				if(assessment.getType().isCvss31()) {
					vuln.setCvssScore(cvssScore);
					vuln.setCvssString(cvssString);
				}else {
					vuln.setImpact(impact);
					vuln.setLikelyhood(likelyhood);
					vuln.setOverall(overall);
				}
				vuln.setName(title);
				vuln.setRecommendation(recommendation);

				vuln.setAssessorId(user.getId());
				
				updateCustomFields(cf, vuln);

				List<Vulnerability> vs = assessment.getVulns();
				vs.add(vuln);
				em.persist(assessment);
				AuditLog.audit(this, "Vulnerability " + vuln.getName() + " was added to assessment.",
						AuditLog.UserAction, AuditLog.CompAssessment, vuln.getAssessmentId(), false);
				assessment.setVulns(vs);

				this.unittestVulnId = assessment.getVulns().get(0).getId();
				if (this.add2feed) {
					Feed f = new Feed();
					f.addNewVulnToFeed(user, vuln, this.feedMsg, Feed.TEAM | Feed.ASSESSMENT, em);
				}
				vuln.updateRiskLevels(em);
				String html = "<tr data-vulnid='" + vuln.getId() + "'>";
				html += "<td class='sev" + vuln.getOverall() + "'><input type='checkbox' id='ckl" + vuln.getId() + "'/></td>";
				html += "<td data-sort='" + vuln.getOverall() + "'><span class='vulnName'>" + StringEscapeUtils.escapeHtml4(vuln.getName()) +"</span><br>";
				html += "<span class='category'>" + (vuln.getDefaultVuln() == null ? ""
								: StringEscapeUtils.escapeHtml4(vuln.getDefaultVuln().getCategory().getName())) + "</span><br>";
				html += "<span class='severity'>" + vuln.getOverallStr() + "</span></td>";
				html += "<td><span class='vulnControl vulnControl-delete' id='deleteVuln"
						+ vuln.getId() + "'><i class='fa fa-trash' title='Delete Vulnerability'> </i></span></td>";
				html += "</tr>";
				JSONArray array = new JSONArray();
				array.add(html);
				JSONObject json = new JSONObject();
				json.put("data", array);
				json.put("token", this.get_token());
				json.put("vulnId", vuln.getId());

				return this.jsonOutput(json.toJSONString());
			} finally {
				HibHelper.getInstance().commit();
			}
		}
		return this.SUCCESSJSON;

	}
	@Action(value = "updateVulnerability")
	public String updateVuln() throws ParseException, UnsupportedEncodingException {
		if (!(this.isAcassessor() || this.isAcmanager()))
			return LOGIN;

		if (!this.testToken(false))
			return this.ERRORJSON;
		
		if (this.vulnid == null) {
			this._message = "Must Select a Vulnerability";
			return this.ERRORJSON;
		}
		User user = this.getSessionUser();
		
		Vulnerability vuln = em.find(Vulnerability.class, vulnid);
		if (vuln == null) {
			this._message = "Not a valid Vulnerability";
			return this.ERRORJSON;
		}

		Assessment assessment = em.find(Assessment.class, vuln.getAssessmentId());
		if(this.isAssessmentBlocked(assessment, user)) {
			return this.ERRORJSON;
		}

		if(this.dvulnerability != null) {
			DefaultVulnerability dv = em.find(DefaultVulnerability.class, this.dvulnerability);
			//vuln.setDescription(dv.getDescription());
			//vuln.setRecommendation(dv.getRecommendation());
			vuln.setName(dv.getName());
			vuln.setCategory(dv.getCategory());
			vuln.setOverall( (long) dv.getOverall());
			vuln.setLikelyhood((long) dv.getLikelyhood());
			vuln.setImpact( (long) dv.getImpact());
		}
		if(this.title != null) {
			vuln.setName(title);
		}
		if(this.description != null) {
			vuln.setDescription(description);
		}
		if(this.recommendation != null) {
			vuln.setRecommendation(recommendation);
		}
		if(this.details != null) {
			vuln.setDetails(details);
		}
		if(this.impact != null && this.impact >= 0 && this.impact <=9) {
			vuln.setImpact(impact);
		}
		if(this.likelyhood != null && this.likelyhood >= 0 && this.likelyhood <=9) {
			vuln.setLikelyhood(likelyhood);
		}
		if(this.overall != null && this.overall >= 0 && this.overall <=9) {
			vuln.setOverall(overall);
		}
		if(this.cvssScore != null) {
			vuln.setCvssScore(cvssScore);
		}
		if(this.cvssString != null) {
			vuln.setCvssString(cvssString);
		}
		if(this.reportSection != null && ReportFeatures.allowSections()) {
			if(this.reportSection.equals("Default")) {
				vuln.setSection("");
			}else {
				vuln.setSection(this.reportSection);
			}
		}
		
		Category cat = null;
		if(this.dcategory != null) {
			cat = em.find(Category.class, this.dcategory);
			vuln.setCategory(cat);
		}
		updateCustomFields(cf, vuln);
		HibHelper.getInstance().preJoin();
		em.joinTransaction();
		em.persist(vuln);
		AuditLog.audit(this, "Vulnerability " + vuln.getName() + " was updated.", AuditLog.UserAction,
				AuditLog.CompAssessment, vuln.getAssessmentId(), false);
		HibHelper.getInstance().commit();
		return SUCCESSJSON;
	}
		

	@Action(value = "DeleteVulns")
	public String deleteVulns() {
		if (!(this.isAcassessor() || this.isAcmanager()))
			return LOGIN;

		if (!this.testToken(false))
			return this.ERRORJSON;

		User user = this.getSessionUser();

		if (vulns.size() <= 0) {
			this._message = "No Vulns Were submited";
			return this.ERRORJSON;
		}
		Long asmtid = (Long) this.getSession("asmtid");
		
		if(this.isAssessmentBlocked(assessment, user)) {
			return this.ERRORJSON;
		}


		HibHelper.getInstance().preJoin();
		em.joinTransaction();
		try {
			Assessment assessment = em.find(Assessment.class, asmtid);

			for (Long vid : vulns) {
				String query = "{ \"vulnerability_id\" : " + vid + "}";
				List<Feed> feeds = em.createNativeQuery(query, Feed.class).getResultList();
				for (Feed f : feeds) {
					em.remove(f);

				}

				for (Vulnerability vv : assessment.getVulns()) {
					if (vv.getId() == vid) {

						assessment.getVulns().remove(vv);
						em.remove(vv);
						AuditLog.audit(this, "Vulnerability " + vv.getName() + " was deleted from assessment.",
								AuditLog.UserAction, AuditLog.CompAssessment, vv.getAssessmentId(), false);
						break;
					}
				}

			}
			em.persist(assessment);
		} finally {

			HibHelper.getInstance().commit();
		}

		return SUCCESSJSON;

	}

	@Action(value = "reassignVulns")
	public String reassignVulns() {
		if (!this.isAcmanager())
			return LOGIN;

		if (!this.testToken(false))
			return this.ERRORJSON;

		User user = this.getSessionUser();
		if (vulns.size() <= 0) {
			this._message = "No Vulns Were submited";
			return this.ERRORJSON;
		}

		Long asmtid = (Long) this.getSession("asmtid");

		try {
			Assessment assessment = em.find(Assessment.class, asmtid);

			if(this.isAssessmentBlocked(assessment, user)) {
				return this.ERRORJSON;
			}
			
			Assessment movedto = em.find(Assessment.class, this.id);
			if(this.isAssessmentBlocked(assessment, user)) {
				this._message = "Receiving Assessment: " + this._message;
				return this.ERRORJSON;
			}

			if (assessment != null && assessment.getCompleted() != null) {
				this._message = "Assessment is finailized.";
				return this.ERRORJSON;
			}

			if (assessment != null && assessment.getCompleted() != null) {
				this._message = "Assessment is finailized.";
				return this.ERRORJSON;
			}

			if (movedto != null && movedto.getCompleted() != null) {
				this._message = "Target Assessment is finailized.";
				return this.ERRORJSON;
			}
			HibHelper.getInstance().preJoin();
			em.joinTransaction();
			for (Long vid : vulns) {
				for (Vulnerability vv : assessment.getVulns()) {
					if (vv.getId() == vid) {

						assessment.getVulns().remove(vv);
						/// Copy all the stuff over and create a new vuln
						Vulnerability moved = new Vulnerability();
						moved.setAssessmentId(movedto.getId());
						moved.setAssessorId(vv.getAssessorId());
						moved.setCategory(vv.getCategory());
						moved.setClosed(vv.getClosed());
						moved.setCustomFields(new ArrayList());
						for (CustomField cf : moved.getCustomFields()) {
							CustomField nf = new CustomField();
							nf.setType(cf.getType());
							nf.setValue(cf.getValue());
							moved.getCustomFields().add(nf);
						}

						moved.setCvssScore(vv.getCvssScore());
						moved.setDefaultVuln(vv.getDefaultVuln());
						moved.setDesc_notes(vv.getDesc_notes());
						moved.setDescription(vv.getDescription());
						moved.setDevClosed(vv.getDevClosed());
						moved.setImpact(vv.getImpact());
						moved.setLikelyhood(vv.getLikelyhood());
						moved.setName(vv.getName());
						moved.setOpened(vv.getOpened());
						moved.setOverall(vv.getOverall());
						moved.setRec_notes(vv.getRec_notes());
						moved.setRecommendation(vv.getRecommendation());
						moved.setTracking(vv.getTracking());

						movedto.getVulns().add(moved);

						em.persist(movedto);

						AuditLog.audit(this,
								"Vulnerability " + vv.getName() + " was moved to " + movedto.getAppId() + " - "
										+ movedto.getName(),
								AuditLog.UserAction, AuditLog.CompAssessment, assessment.getId(), false);
						AuditLog.audit(this,
								"Vulnerability " + vv.getName() + " was moved from  " + assessment.getAppId() + " - "
										+ assessment.getName(),
								AuditLog.UserAction, AuditLog.CompAssessment, movedto.getId(), false);

						break;
					}
				}
			}

		} catch (Exception ex) {
			ex.printStackTrace();
		} finally {
			HibHelper.getInstance().commit();
		}
		return this.SUCCESSJSON;

	}

	@Action(value = "onGoingAssessments")
	public String onGoingAssessments() {
		if (!this.isAcmanager())
			return LOGIN;
		String query = "{ '$query':{ 'completed' : {'$exists': false}}, '$orderby':{'appId' : 1}}";
		List<Assessment> asmts = em.createNativeQuery(query, Assessment.class).getResultList();
		JSONArray array = new JSONArray();
		for (Assessment a : asmts) {
			JSONObject obj = new JSONObject();
			obj.put("id", a.getId());
			obj.put("appid", a.getAppId());
			obj.put("name", a.getName());
			obj.put("type", a.getType() == null ? "" : a.getType().getType());
			array.add(obj);
		}
		return this.jsonOutput(array.toJSONString());

	}
	private void updateCustomFields(String customFieldJSON, Vulnerability vuln) throws ParseException, UnsupportedEncodingException {
		if (customFieldJSON != null && !customFieldJSON.equals("")) {
			JSONParser parse = new JSONParser();
			JSONArray array = (JSONArray) parse.parse(customFieldJSON);
			for (int i = 0; i < array.size(); i++) {
				JSONObject obj = (JSONObject) array.get(i);
				if (vuln.getCustomFields() == null)
					vuln.setCustomFields(new ArrayList());
				CustomField cf = null;
				// find the CF in the DV if it exits
				for (CustomField tmp : vuln.getCustomFields()) {
					if (tmp.getType().getId().equals(Long.parseLong("" + obj.get("typeid")))) {
						cf = tmp;
						break;
					}
				}
				// CF does not exist so we need to create it
				if (cf == null) {
					cf = new CustomField();
					CustomType ct = em.find(CustomType.class, Long.parseLong("" + obj.get("typeid")));
					cf.setType(ct);
				}
				String value = "" + obj.get("value");
				String decoded = new String(Base64.getDecoder().decode(value.getBytes()), "UTF-8");
				cf.setValue( decoded );
				vuln.getCustomFields().add(cf);

			}
		}
	}

	private boolean blockingPR(Long asmtId) {

		PeerReview prTemp = (PeerReview) em.createNativeQuery("{\"assessment_id\" : " + asmtId + "}", PeerReview.class)
				.getResultList().stream().findFirst().orElse(null);
		boolean prSubmitted = false;
		boolean prComplete = false;
		if (prTemp != null) {
			prSubmitted = true;
			if (prTemp.getCompleted() != null && prTemp.getCompleted().getTime() != 0) {
				prComplete = true;
			} else
				prComplete = false;
		}

		if (prSubmitted && !prComplete) {
			return true;
		} else
			return false;
	}
	
	private boolean isAssessmentBlocked(Assessment assessment, User user) {
		if (this.blockingPR(assessment.getId())) {
			this._message = "Vulnerability cannot be updated when in Peer Review.";
			return true; 
		}
		if( !assessment.isAcceptedEdits()) {
			this._message = "Vulnerability cannot be updated until the Peer Review's Edits are Accepted. <br><br>"
					+ "<a class='btn btn-primary' href='Assessment#Finalize'> Click Here to Accept Edits</a>";
			return true; 
		}
		
		if (assessment != null && assessment.getCompleted() != null) {
			this._message = "Vulnerability cannot be changed once the assessment is Finalized.";
			return true; 
		}

		if (!assessment.getAssessor().stream().anyMatch(u -> u.getId() == user.getId())) {
			this._message = "You Are not the owner of this assessment";
			return true; 
		}
		return false;
		
	}

	public String submit() {
		return SUCCESS;
	}

	public String getTitle() {
		return title;
	}

	public void setTitle(String title) {
		if (title != null)
			title = title.trim();
		this.title = title;
	}

	public int getDefaultTitle() {
		return defaultTitle;
	}

	public void setDefaultTitle(int defaultTitle) {
		this.defaultTitle = defaultTitle;
	}

	public int getDefaultCategory() {
		return defaultCategory;
	}

	public void setDefaultCategory(int defaultCategory) {
		this.defaultCategory = defaultCategory;
	}

	public Long getLikelyhood() {
		return likelyhood;
	}

	public void setLikelyhood(Long likelyhood) {
		this.likelyhood = likelyhood;
	}

	public Long getImpact() {
		return impact;
	}

	public void setImpact(Long impact) {
		this.impact = impact;
	}

	public Long getOverall() {
		return overall;
	}

	public void setOverall(Long overall) {
		this.overall = overall;
	}

	public String getDescription() {
		return description;
	}

	public void setDescription(String description) {
		if (description != null)
			description = description.trim();
		this.description = description;
	}

	public String getRecommendation() {
		return recommendation;
	}

	public void setRecommendation(String recommendation) {
		if (recommendation != null)
			recommendation = recommendation.trim();
		this.recommendation = recommendation;
	}

	public Long getId() {
		return id;
	}

	public void setId(Long id) {
		this.id = id;
	}

	public Long getVulnid() {
		return vulnid;
	}

	public void setVulnid(Long vulnid) {
		this.vulnid = vulnid;
	}

	public String getDelete() {
		return delete;
	}

	public void setDelete(String delete) {
		this.delete = delete;
	}

	public Long getTestId() {
		return this.likelyhood;
	}

	public String getAction() {
		return action;
	}

	public void setAction(String action) {
		this.action = action;
	}

	public String getFeedMsg() {
		return feedMsg;
	}

	public void setFeedMsg(String feedMsg) {
		this.feedMsg = feedMsg;
	}

	public Boolean getAdd2feed() {
		return add2feed;
	}

	public void setAdd2feed(Boolean add2feed) {
		this.add2feed = add2feed;
	}

	public String getCf() {
		return cf;
	}

	public void setCf(String cf) {
		if (cf != null)
			cf = cf.trim();
		this.cf = cf;
	}

	public List<CustomField> getFields() {
		return fields;
	}

	public Long getUnittestVulnid() {
		return this.unittestVulnId;
	}

	public void setReportid(Long reportid) {
		this.reportid = reportid;
	}

	public List<ReportMap> getReports() {
		return reports;
	}

	public Vulnerability getCurrent() {
		return current;
	}

	public List<Long> getVulns() {
		return vulns;
	}

	public void setVulns(List<Long> vulns) {
		this.vulns = vulns;
	}

	public String getDetails() {
		return details;
	}

	public void setDetails(String details) {
		this.details = details;
	}

	public Long getDcategory() {
		return dcategory;
	}

	public void setDcategory(Long dcategory) {
		this.dcategory = dcategory;
	}

	public Long getDvulnerability() {
		return dvulnerability;
	}

	public void setDvulnerability(Long dvulnerability) {
		this.dvulnerability = dvulnerability;
	}

	public String getVulnAttr() {
		return vulnAttr;
	}

	public void setVulnAttr(String vulnAttr) {
		this.vulnAttr = vulnAttr;
	}
	
	public String getCvssString() {
		return cvssString;
	}

	public void setCvssString(String cvssString) {
		this.cvssString = cvssString;
	}

	public String getCvssScore() {
		return cvssScore;
	}

	public void setCvssScore(String cvssScore) {
		this.cvssScore = cvssScore;
	}
	
	public Assessment getAssessment() {
		return this.assessment;
	}
	
	public Boolean getSectionsEnabled() {
		return ReportFeatures.allowSections();
	}
	
	public void setReportSection(String section) {
		this.reportSection = section;
	}
	
	public String getSafeJSON(String vuln) {
		return Base64.getEncoder().encodeToString(vuln.getBytes());
	}

	

}
